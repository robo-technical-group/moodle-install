function extract_moodle_src() {
    cd "$web_dir"
    if [ ! -d "$moodle_version_string" ]
    then
        if [ -d "moodle" ]
        then
            print_verbose "Deleting existing moodle directory at $web_dir"
            rm -rf moodle
        fi
        if [ -d "moodle" ]
        then
            echo "Could not delete moodle directory at ${web_dir}; aborting."
            return 1
        fi
        print_verbose "Extracting Moodle PHP files."
        tar xfz "$moodle_tarball"
        mv moodle "$moodle_version_string"
    else
        print_verbose "Moodle PHP files already extracted."
    fi
    if [ -e current ]
    then
        rm current
    fi
    ln -s $moodle_version_string current
}

function get_iomad_src() {
    test_bins "git"
    local retval=$?
    if [ $retval -gt 0 ]
    then
        return $retval
    fi

    if [ ! -d "$iomad_dir" ]
    then
        local uri="https://github.com/iomad/iomad.git"
        print_verbose "Cloning repository at $uri to $web_dir"
        cd "$web_dir"
        git clone $uri
        cd iomad
        git checkout -b myiomad origin/$iomad_branch
    else
        cd "$iomad_dir"
        git config pull.rebase true
        git checkout -b myiomad origin/$iomad_branch
        git pull
    fi
}

function get_moodle_src() {
    test_bins "wget"
    local retval=$?
    if [ $retval -gt 0 ]
    then
        return $retval
    fi

    # Only download tarball if a current one does not exist.
    local uri="https://download.moodle.org/download.php/direct/stable${moodle_full_version[0]}${moodle_full_version[1]}/moodle-latest-${moodle_full_version[0]}${moodle_full_version[1]}.tgz"
    moodle_tarball="${moodle_src_dir}/moodle.tgz"
    if [ ! -e $moodle_tarball ]
    then
        print_verbose "Downloading $uri to $moodle_src_dir"
        wget -O "$moodle_tarball" $uri
    fi
    cd $moodle_src_dir
    tar xfz moodle.tgz moodle/version.php
    get_moodle_version "${moodle_src_dir}/moodle"
    retval=$?
    print_verbose "Moodle version downloaded: $moodle_version_string"
    rm -rf moodle
    if [ $retval -gt 0 ]
    then
        return $retval
    fi

    local new_moodle_file=moodle-${moodle_version_string}.tgz
    if [ ! -e $new_moodle_file ]
    then
        mv moodle.tgz $new_moodle_file
    else
        rm moodle.tgz
    fi
    moodle_tarball=${moodle_src_dir}/${new_moodle_file}
}

function get_moodle_version() {
    local src_dir="$1"
    local ver_file="${1}/version.php"
    if [ ! -e "$ver_file" ]
    then
        echo "Could not find Moodle version file ${ver_file}; aborting."
        return 1
    fi

    local branch=$(grep "^\$branch" "$ver_file" | sed -n "s/^\$branch[[:blank:]]*=[[:blank:]]*'\([[:digit:]]*\)';.*/\1/p")
    moodle_full_version[0]=${branch:0:1}
    moodle_full_version[1]=${branch:1}
    local rev=$(grep "^\$version" "$ver_file" | sed -n "s/^\$version[[:blank:]]*=[[:blank:]]*[[:digit:]]\{8\}\(.*\);.*/\1/p")
    moodle_full_version[2]=${rev%%.*}
    moodle_full_version[3]=${rev#*.}
    
    printf -v moodle_version_string '%s.' "${moodle_full_version[@]}"
    moodle_version_string=${moodle_version_string%.}
}

function split_version_string() {
    moodle_full_version=()
    local ver_string="${moodle_ver}."
    while [[ $ver_string ]];
    do
        moodle_full_version+=( "${ver_string%%.*}" )
        ver_string=${ver_string#*.}
    done

    if [ ${moodle_full_version[0]} -ge 4 ]
    then
        moodle_full_version[1]="0${moodle_full_version[1]}"
    fi
}
